import React, { useState, useEffect } from 'react';
import { StyleSheet, Text, View, TouchableOpacity, Alert } from 'react-native';
import Slider from '@react-native-community/slider';
import Icon from 'react-native-vector-icons/Ionicons';
import * as Location from 'expo-location';
import * as Notifications from 'expo-notifications';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import MapView, { PROVIDER_GOOGLE } from 'react-native-maps';

const Stack = createStackNavigator();

// Set notification handler
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: false,
    shouldSetBadge: false,
  }),
});

// Function to check if the user is within a radius
function isWithinRadius(currentLat, currentLon, targetLat, targetLon, radius) {
  const earthRadius = 3958.8; // Radius of the Earth in miles

  const toRadians = (degrees) => degrees * (Math.PI / 180);

  const lat1 = toRadians(currentLat);
  const lon1 = toRadians(currentLon);
  const lat2 = toRadians(targetLat);
  const lon2 = toRadians(targetLon);

  const dLat = lat2 - lat1;
  const dLon = lon2 - lon1;

  const a =
    Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    Math.cos(lat1) * Math.cos(lat2) *
    Math.sin(dLon / 2) * Math.sin(dLon / 2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

  const distance = earthRadius * c;
  
  return distance <= radius;
}

// Home Screen Component
function HomeScreen({ navigation }) {
  const [radius, setRadius] = useState(10);
  const [location, setLocation] = useState(null);

  useEffect(() => {
    const checkLocationPermission = async () => {
      let { status } = await Location.getForegroundPermissionsAsync();
      if (status === 'granted') {
        let location = await Location.getCurrentPositionAsync({});
        setLocation(location);
        navigation.navigate('Map', { location });
      }
    };

    checkLocationPermission();
  }, []);

  const handleNearMePress = async () => {
    let { status } = await Location.requestForegroundPermissionsAsync();
    if (status !== 'granted') {
      Alert.alert('Permission Denied', 'Permission to access location was denied');
      return;
    }

    try {
      let location = await Location.getCurrentPositionAsync({});
      setLocation(location);
      console.log(location)
      navigation.navigate('Map', { location });
    } catch (error) {
      Alert.alert('Error', 'Could not get your location. Please try again.');
      console.error(error);
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Threat Track</Text>
      
      <Text style={styles.label}>Press to add your location</Text>
      <TouchableOpacity style={styles.locationButton} onPress={handleNearMePress}>
        <Icon name="navigate" size={100} color="black" />
      </TouchableOpacity>

      <Text style={styles.label}>Notifications Radius</Text>
      <Slider
        style={styles.slider}
        minimumValue={0}
        maximumValue={100}
        minimumTrackTintColor="#1e90ff"
        maximumTrackTintColor="#d3d3d3"
        thumbTintColor="#1e90ff"
        value={radius}
        onValueChange={setRadius}
      />

      <Text style={styles.label}>Manual Location Entry</Text>
      <View style={styles.separator} />
    </View>
  );
}

// Map Screen Component
function MapScreen({ route }) {
  const { location } = route.params;
  const initialRegion = {
    latitude: location ? location.coords.latitude : 37.78825,
    longitude: location ? location.coords.longitude : -122.4324,
    latitudeDelta: 0.0922,
    longitudeDelta: 0.0421,
  };

  return (
    <View style={styles.container}>
      <MapView
        provider={PROVIDER_GOOGLE} // Use Google Maps
        style={styles.map}
        initialRegion={initialRegion}
      />
    </View>
  );
}

// App Component
export default function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator initialRouteName="Home">
        <Stack.Screen name="Home" component={HomeScreen} options={{ headerShown: false }} />
        <Stack.Screen name="Map" component={MapScreen} options={{ headerShown: false }} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  title: {
    fontSize: 32,
    fontWeight: 'bold',
    marginBottom: 40,
  },
  label: {
    fontSize: 16,
    marginBottom: 20,
    textAlign: 'center',
    color: '#666',
  },
  locationButton: {
    marginBottom: 40,
    alignItems: 'center',
    justifyContent: 'center',
  },
  slider: {
    width: '100%',
    height: 40,
    marginBottom: 40,
  },
  separator: {
    width: '100%',
    height: 1,
    backgroundColor: '#d3d3d3',
    marginTop: 10,
    marginBottom: 20,
  },
  map: {
    ...StyleSheet.absoluteFillObject,
  },
});
